apiVersion: {{ template "daemonset_api_version" . }}
kind: DaemonSet
metadata:
  labels:
    app: {{ template "app.name" . }}
    chart: {{ template "app.version" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  name: {{ template "app.fullname" . }}
spec:
  selector:
    matchLabels:
      app: {{ template "app.name" . }}
      chart: {{ template "app.version" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "app.name" . }}
        chart: {{ template "app.version" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
      - name: exporter-gateway
        image: {{ template "system_default_registry" . }}{{ .Values.image.gateway.repository }}:{{ .Values.image.gateway.tag }}
        args:
        - --interval=15s
        - --from=expose-node-metrics.url=http://127.0.0.1:{{ .Values.ports.metrics.port }}/metrics
        - --to=psgw.url={{ .Values.pushgatewayURL }}
        - --to.group=instance=$(POD_IP)
        - --to.group=node=$(NODE_NAME)
        - --to.group=host_ip=$(HOST_IP)
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        {{- if and .Values.resources .Values.resources.gateway }}
        resources:
{{ toYaml .Values.resources.gateway | indent 10 }}
        {{- end }}
      - name: exporter-node
        image: {{ template "system_default_registry" . }}{{ .Values.image.repository }}:{{ .Values.image.tag }}
        args:
        - --web.listen-address=127.0.0.1:{{ .Values.ports.metrics.port }}
        - --path.procfs=/host/proc
        - --path.sysfs=/host/sys
        - --path.rootfs=/host
        {{- $usingCollectors := merge .Values.collectors .Values.defaultCollectorSettings }}
        {{- range $collectorName, $collectorVal := $usingCollectors }}
        {{- if and $collectorVal $collectorVal.enabled }}
        - --collector.{{ $collectorName }}
        {{- $_ := unset $collectorVal "enabled" -}}
        {{- if $collectorVal }}
        {{- range $collectorValKey, $collectorValVal := $collectorVal }}
        {{- if $collectorValVal }}
        - --collector.{{ $collectorName }}.{{ $collectorValKey }}={{ $collectorValVal }}
        {{- else }}
        - --collector.{{ $collectorName }}.{{ $collectorValKey }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- else }}
        - --no-collector.{{$collectorName}}
        {{- end }}
        {{- end }}
        ports:
        - name: http
          containerPort: {{ .Values.ports.metrics.port }}
          {{- if .Values.enabledHostNetwork }}
          hostPort: {{ .Values.ports.metrics.port }}
          {{- end }}
        {{- if and .Values.resources .Values.resources.core }}
        resources:
{{ toYaml .Values.resources.core | indent 10 }}
        {{- end }}
        volumeMounts:
        - name: proc
          mountPath: /host/proc
          readOnly:  true
        - name: sys
          mountPath: /host/sys
          readOnly: true
        - name: host
          mountPath: /host
          readOnly: true
      {{- if .Values.enabledRBAC }}
      serviceAccountName: {{ default (include "app.fullname" .) .Values.serviceAccountName }}
      {{- end }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      tolerations:
      - operator: Exists
      nodeSelector:
        beta.kubernetes.io/os: linux
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      hostPID: true
      volumes:
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
      - name: host
        hostPath:
          path: /
